/**
 * @overview The renderer for csv files.
 * All string data is required by the GRIPS system or too deeply related to the data.
 * @author Thomas Oswald
 */

import settings from '../../resources/settings';

/**
 * @class
 * @description Specific renderer for csv files to be used by GRIPS.
 * @memberof module:API/export
 */
function CSVRenderer() {
    this.header = 'ID,Bewertung,Skala,Zuletzt ge√§ndert (Bewertung),Feedback als Kommentar';
    this.type = 'text/csv;charset=utf-8;';
    this.csv = '';
}

/**
 * Adds a header line to the csv.
 * @param {string} header heading line.
 */
CSVRenderer.prototype.addHeader = function(header) {
    if (header === undefined || header.length === 0) this.csv += this.header;
    else this.csv += header;
    this.csv += '\n';
    return this;
};

CSVRenderer.prototype.addToAlphabeticOrder = function(func) {
    this.toAlphabeticOrder = func;
    return this;
};

/**
 * This method will parse a submission to a valid csv line and adds it to the csv string.
 * @param {Object} submission a submission object.
 * @param {Object[]} submission.answers with an answer array.
 * @param {Object} submission.user with an user object.
 * @param {string} submission.grips_id the submission id generated by GRIPS.
 * @param {number} sheetOrder the order of a sheet.
 * @param {number} requiredPoints the required points to pass the sheet.
 * @param {number} maxPoints the maximum points achievable.
 * @param {Object} template object that defines whether a template exercise was chosen. This case needs an extra line.
 */
CSVRenderer.prototype.addSubmission = function(submission, exercises, sheetOrder, requiredPoints, maxPoints, template) {
    if (submission.grips_id === undefined) throw Error('No grips id for the submission with id: ' + submission.id);
    let line = '';
    line += 'Teilnehmer/in' + submission.grips_id + ',' + hasPassed(submission, requiredPoints, (template.flag && template.correctly) ? template.points : 0) + ',"nicht bestanden\nbestanden",,"\n';
    line += '<p> ' + getOverallFeedback(submission, requiredPoints, maxPoints) + ' </p>\n';
    let length = submission.answers.length;
    sheetOrder += 1;
    for (let i = 0; i < length; i++) {
        let answer = submission.answers[i];
        line += '<p> Aufgabe ' + sheetOrder + '.' + (getExerciseOrder(exercises, answer.task._id) + 1) + this.toAlphabeticOrder(answer.task.order + 1) + '): ';
        let txt = toCSVString(answer.text);
        if (txt.length !== 0) line += '(' + txt + ')';
        else line += settings.csv.missing_text;
        let feedback = (answer.feedback !== undefined) ? answer.feedback : settings.csv.no_feedback;
        line += ' ' + feedback + ' </p>';
        line += '\n';
    }
    if (template.flag) {
        line += '<p> Aufgabe ' + sheetOrder + '.' + submission.answers.length;
        line += ' ist ';
        line += (template.correctly) ? 'korrekt' : 'falsch';
        line += '! </p>\n';
    }
    if (submission.user != null) {
        line += '<p> Korrigiert von ' + submission.user.forename + ' ' + submission.user.lastname + ' </p>';
    }
    line += '"';
    this.csv += line;
};

/**
 * Returns the csv data as string.
 * @returns {string} csv as string.
 */
CSVRenderer.prototype.export = function() {
    return this.csv;
};

/**
 * Calculates reached points and compares the result with the required points.
 * @memberof CSVRenderer
 * @param {Submission} submission a {Submission} with an array of {Answer}.
 * @param {number} requiredPoints points that indicates passing the sheet.
 * @param {number} templatePoints points for the last exercise.
 * @returns one of the correction scales.
 */
function hasPassed(submission, requiredPoints, templatePoints) {
    let points;
    for (let answer of submission.answers) {
        points += answer.achieved_points;
    }
    points += templatePoints;
    if (points >= requiredPoints) return 'bestanden';
    else return 'nicht bestanden';
}

/**
 * Searches exercises after task that has the taskId.
 * @memberof CSVRenderer
 * @private
 * @param {Array} exercises array of {Exercise}.
 * @param {string} taskId id of {Task}.
 * @returns {number} order of exercise.
 */
function getExerciseOrder(exercises, taskId) {
    for (let e of exercises) {
        for (let t of e.tasks) {
            if (t._id.equals(taskId)) {
                return e.order;
            }
        }
    }
    return 0;
}

/**
 * Returns feedback for the whole submission.
 * @memberof class:CSVRenderer
 * @private
 * @param {Submission} submission with array of {Answer}.
 * @param {number} requiredPoints points that indicates passing the sheet.
 * @param {number} maxPoints maximum of points achievable.
 */
function getOverallFeedback(submission, requiredPoints, maxPoints) {
    let points = 0;
    for (let answer of submission.answers) {
        points += answer.achieved_points;
    }
    if (points === maxPoints) return settings.csv.overall_text.max;
    if (points >= requiredPoints) return settings.csv.overall_text.pass;
    else return settings.csv.overall_text.fail;
}

/**
 * Replaces all " with ' in a string.
 * @private
 * @memberof module:API/export~CSVRenderer
 * @param {string} str string
 */
function toCSVString(str) {
    if (str === undefined || str.length === 0) return '';
    return str.replace('\"\g', '\''); // eslint-disable-line no-useless-escape
}

export default CSVRenderer;